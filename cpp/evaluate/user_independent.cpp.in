/**
 * Copyright 2017 the University of Central Florida Research Foundation, Inc.
 * All rights reserved.
 *
 * Eugene M. Taranta II <etaranta@gmail.com>
 * Amirreza Samiei <samiei@knights.ucf.edu>
 * Mehran Maghoumi <mehran@cs.ucf.edu>
 * Pooya Khaloo <pooya@cs.ucf.edu>
 * Corey R. Pittman <cpittman@knights.ucf.edu>
 * Joseph J. LaViola Jr. <jjl@cs.ucf.edu>
 *
 * Subject to the terms and conditions of this academic license, the Licensor
 * hereby grants, royalty-free, non-sublicensable, non-commercial,
 * non-exclusive, academic research license to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, but not to distribute, and to permit
 * persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 *    * The above copyright notice and this permission notice shall be included
 *      in all copies or substantial portions of the Software. Publications
 *      resulting from use of the software shall cite the authors of the
 *      publication titled, “Jackknife: A Reliable Recognizer with Few Samples
 *      and Many Modalities.”
 *
 *    * Identification of the authors and copyright holder of the software shall
 *      receive attribution, in any reasonable manner.
 *
 *    * Patent and trademark rights of the copyright holder are not licensed
 *      under this academic license.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" BY THE COPYRIGHT HOLDER, WITHOUT WARRANTY OF
 * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT
 * LIMITED TO LOSS OF USE, DATA OR BUSINESS INTERRUPTION), CLAIM, OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "evaluate.h"

/**
 * A simple user independent test.
 */
void user_indepedent_test(device_type_t device)
{
    // First, load all training data for one device type.
    const char *path;

    if(device == KINECT)
        path = "${Jackknife_Root}datasets/jk2017/kinect/training/";
    else if(device == LEAP_MOTION)
        path = "${Jackknife_Root}datasets/jk2017/leap_motion/training/";
    else
        assert(0);

    Dataset::Ptr ds = load_dataset(path);

    int subject_cnt = ds->subject_cnt();
    int sample_cnt = ds->sample_cnt();
    //struct timeval start, end;
    //double time_us = 0.0;
    ConfusionMatrices cm(ds);

    // iterate through all subjects
    for(int subject_id = 0;
        subject_id < subject_cnt;
        subject_id ++)
    {
        ConfusionMatrices cm_individual(ds);

        std::cout << "Participant: " << subject_id << std::endl;

        // train a recognizer with the selected subject
        Jackknife::jackknife_blades_t blades;

        //blades.set_ed_defaults();
        blades.set_ip_defaults();

        Jackknife::Jackknife jk(blades);

        double template_cnt = 0.0;

        for(int sample_id = 0;
            sample_id < sample_cnt;
            sample_id++)
        {
            Jackknife::Sample::Ptr sample = ds->samples[sample_id];

            if(sample->subject_id != subject_id)
                continue;

            jk.add_template(ds->samples[sample_id]);
        }

        // only train the recognize if you need
        // to set a rejection criteria
        // jk.train(4, 2, 1.0);

        // test the recognizer with all other samples
        for(int sample_id = 0;
            sample_id < sample_cnt;
            sample_id ++)
        {
            Jackknife::Sample::Ptr sample = ds->samples[sample_id];

            if(sample->subject_id == subject_id)
                continue;

            //gettimeofday(&start, NULL);
            int gid = jk.classify(sample);
            //gettimeofday(&end, NULL);

            //double seconds  = (double)(end.tv_sec  - start.tv_sec);
            //double useconds = (double)(end.tv_usec - start.tv_usec);
            //time_us += (seconds*1.0e6 + useconds);

            cm_individual.add_result(
                sample->gesture_id,
                gid);
        }

        cm.add_result(cm_individual);

        results_t results = cm_individual.results();
        results.print();
        std::cout << std::endl;

        // std::cout << "result: " << accuracy << "%, ";
        // std::cout << "time: " << time_us / test_cnt;
        // std::cout << " us" << std::endl;
        // std::cout << std::endl;
    }

    std::cout << "Aggregate Results: " << std::endl;
    results_t results = cm.results();
    results.print();
    std::cout << std::endl;
}
